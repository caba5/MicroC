program: WHILE
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID WHILE
##
## Ends in an error in state: 1.
##
## fundecl -> VOID . ID LPAR loption(separated_nonempty_list(COMMA,vardecl_no_init)) RPAR block [ VOID STRUCT INT FLOAT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## VOID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID ID WHILE
##
## Ends in an error in state: 2.
##
## fundecl -> VOID ID . LPAR loption(separated_nonempty_list(COMMA,vardecl_no_init)) RPAR block [ VOID STRUCT INT FLOAT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## VOID ID
##

Cannot declare void variables

program: VOID ID LPAR WHILE
##
## Ends in an error in state: 3.
##
## fundecl -> VOID ID LPAR . loption(separated_nonempty_list(COMMA,vardecl_no_init)) RPAR block [ VOID STRUCT INT FLOAT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## VOID ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR STRUCT WHILE
##
## Ends in an error in state: 4.
##
## typ -> STRUCT . ID [ TIMES LPAR ID ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR BOOL ID SEMICOL
##
## Ends in an error in state: 10.
##
## separated_nonempty_list(COMMA,vardecl_no_init) -> vardecl_no_init . [ RPAR ]
## separated_nonempty_list(COMMA,vardecl_no_init) -> vardecl_no_init . COMMA separated_nonempty_list(COMMA,vardecl_no_init) [ RPAR ]
##
## The known suffix of the stack is as follows:
## vardecl_no_init
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production vardecl_no_init -> typ vardesc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR BOOL ID COMMA WHILE
##
## Ends in an error in state: 11.
##
## separated_nonempty_list(COMMA,vardecl_no_init) -> vardecl_no_init COMMA . separated_nonempty_list(COMMA,vardecl_no_init) [ RPAR ]
##
## The known suffix of the stack is as follows:
## vardecl_no_init COMMA
##

Invalid function parameter type

program: BOOL ID LPAR BOOL WHILE
##
## Ends in an error in state: 12.
##
## vardecl_no_init -> typ . vardesc [ SEMICOL RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## typ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL TIMES WHILE
##
## Ends in an error in state: 13.
##
## vardesc -> TIMES . vardesc [ SEMICOL RPAR LSBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL LPAR WHILE
##
## Ends in an error in state: 14.
##
## vardesc -> LPAR . vardesc RPAR [ SEMICOL RPAR LSBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL LPAR ID SEMICOL
##
## Ends in an error in state: 16.
##
## vardesc -> LPAR vardesc . RPAR [ SEMICOL RPAR LSBRACKET COMMA ASSIGN ]
## vardesc -> vardesc . LSBRACKET option(VINT) RSBRACKET [ RPAR LSBRACKET ]
##
## The known suffix of the stack is as follows:
## LPAR vardesc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LSBRACKET WHILE
##
## Ends in an error in state: 18.
##
## vardesc -> vardesc LSBRACKET . option(VINT) RSBRACKET [ SEMICOL RPAR LSBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## vardesc LSBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LSBRACKET VINT WHILE
##
## Ends in an error in state: 20.
##
## vardesc -> vardesc LSBRACKET option(VINT) . RSBRACKET [ SEMICOL RPAR LSBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## vardesc LSBRACKET option(VINT)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL TIMES ID WHILE
##
## Ends in an error in state: 22.
##
## vardesc -> TIMES vardesc . [ SEMICOL RPAR LSBRACKET COMMA ASSIGN ]
## vardesc -> vardesc . LSBRACKET option(VINT) RSBRACKET [ SEMICOL RPAR LSBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## TIMES vardesc
##

Functions cannot return a pointer type

program: BOOL ID LPAR BOOL ID ASSIGN
##
## Ends in an error in state: 23.
##
## vardecl_no_init -> typ vardesc . [ SEMICOL RPAR COMMA ]
## vardesc -> vardesc . LSBRACKET option(VINT) RSBRACKET [ SEMICOL RPAR LSBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## typ vardesc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID ID LPAR RPAR WHILE
##
## Ends in an error in state: 27.
##
## fundecl -> VOID ID LPAR loption(separated_nonempty_list(COMMA,vardecl_no_init)) RPAR . block [ VOID STRUCT INT FLOAT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## VOID ID LPAR loption(separated_nonempty_list(COMMA,vardecl_no_init)) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET VOID
##
## Ends in an error in state: 28.
##
## block -> LCBRACKET . list(stmt_or_dec) RCBRACKET [ WHILE VSTRING VOID VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT EOF ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## LCBRACKET
##

Variables can't have void type

program: BOOL ID LPAR RPAR LCBRACKET WHILE WHILE
##
## Ends in an error in state: 29.
##
## stmt -> WHILE . LPAR expr RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET WHILE LPAR WHILE
##
## Ends in an error in state: 30.
##
## stmt -> WHILE LPAR . expr RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## WHILE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN TIMES WHILE
##
## Ends in an error in state: 36.
##
## lexpr -> TIMES . lexpr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## lexpr -> TIMES . aexpr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
##
## The known suffix of the stack is as follows:
## TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN LPAR WHILE
##
## Ends in an error in state: 38.
##
## aexpr -> LPAR . rexpr_comma RPAR [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## lexpr -> LPAR . lexpr RPAR [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN SUB WHILE
##
## Ends in an error in state: 39.
##
## rexpr -> SUB . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## SUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN SIZEOF WHILE
##
## Ends in an error in state: 40.
##
## rexpr -> SIZEOF . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## SIZEOF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN NOT WHILE
##
## Ends in an error in state: 41.
##
## rexpr -> NOT . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN INCR WHILE
##
## Ends in an error in state: 42.
##
## rexpr -> INCR . lexpr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## INCR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN AMP LPAR WHILE
##
## Ends in an error in state: 43.
##
## lexpr -> LPAR . lexpr RPAR [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN AMP LPAR ID TIMES
##
## Ends in an error in state: 45.
##
## lexpr -> LPAR lexpr . RPAR [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## lexpr -> lexpr . LSBRACKET expr RSBRACKET [ RPAR LSBRACKET DOT ]
## lexpr -> lexpr . DOT ID [ RPAR LSBRACKET DOT ]
##
## The known suffix of the stack is as follows:
## LPAR lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LSBRACKET WHILE
##
## Ends in an error in state: 47.
##
## lexpr -> lexpr LSBRACKET . expr RSBRACKET [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
##
## The known suffix of the stack is as follows:
## lexpr LSBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID WHILE
##
## Ends in an error in state: 48.
##
## lexpr -> ID . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## rexpr -> ID . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LPAR WHILE
##
## Ends in an error in state: 49.
##
## rexpr -> ID LPAR . loption(separated_nonempty_list(COMMA,expr)) RPAR [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN DECR WHILE
##
## Ends in an error in state: 50.
##
## rexpr -> DECR . lexpr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## DECR
##

Cannot decrement a literal

program: BOOL ID ASSIGN DECR ID INCR
##
## Ends in an error in state: 51.
##
## lexpr -> lexpr . LSBRACKET expr RSBRACKET [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ GT GEQ EQ DOT DIV COMMA BITXOR BITOR AND AMP ADD ]
## lexpr -> lexpr . DOT ID [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ GT GEQ EQ DOT DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> DECR lexpr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## DECR lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID DOT WHILE
##
## Ends in an error in state: 52.
##
## lexpr -> lexpr DOT . ID [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
##
## The known suffix of the stack is as follows:
## lexpr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN BITNOT WHILE
##
## Ends in an error in state: 54.
##
## rexpr -> BITNOT . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## BITNOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN AMP WHILE
##
## Ends in an error in state: 55.
##
## aexpr -> AMP . lexpr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
##
## The known suffix of the stack is as follows:
## AMP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN AMP ID WHILE
##
## Ends in an error in state: 56.
##
## aexpr -> AMP lexpr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## lexpr -> lexpr . LSBRACKET expr RSBRACKET [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## lexpr -> lexpr . DOT ID [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
##
## The known suffix of the stack is as follows:
## AMP lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN TIMES NULL WHILE
##
## Ends in an error in state: 58.
##
## expr -> lexpr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## lexpr -> lexpr . LSBRACKET expr RSBRACKET [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## lexpr -> lexpr . DOT ID [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## rexpr -> lexpr . ASSIGN expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRSUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRTIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRDIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRMOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITAND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITSHL expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITSHR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . INCR [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . DECR [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ASSIGN WHILE
##
## Ends in an error in state: 61.
##
## rexpr -> lexpr ASSIGN . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ASSIGN NULL INCR
##
## Ends in an error in state: 62.
##
## rexpr -> lexpr ASSIGN expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ASSIGN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID TIMES WHILE
##
## Ends in an error in state: 63.
##
## rexpr -> expr TIMES . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID TIMES NULL INCR
##
## Ends in an error in state: 64.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr TIMES expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr TIMES expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SHIFTRIGHT WHILE
##
## Ends in an error in state: 65.
##
## rexpr -> expr SHIFTRIGHT . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr SHIFTRIGHT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SHIFTRIGHT NULL INCR
##
## Ends in an error in state: 66.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr SHIFTRIGHT expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr SHIFTRIGHT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SHIFTLEFT WHILE
##
## Ends in an error in state: 67.
##
## rexpr -> expr SHIFTLEFT . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr SHIFTLEFT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SHIFTLEFT NULL INCR
##
## Ends in an error in state: 68.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr SHIFTLEFT expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr SHIFTLEFT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID AMP WHILE
##
## Ends in an error in state: 69.
##
## rexpr -> expr AMP . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr AMP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID AMP NULL INCR
##
## Ends in an error in state: 70.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr AMP expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr AMP expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SUB WHILE
##
## Ends in an error in state: 72.
##
## rexpr -> expr SUB . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID SUB NULL INCR
##
## Ends in an error in state: 73.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr SUB expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID MOD WHILE
##
## Ends in an error in state: 74.
##
## rexpr -> expr MOD . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr MOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID MOD NULL INCR
##
## Ends in an error in state: 75.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr MOD expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr MOD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID DIV WHILE
##
## Ends in an error in state: 76.
##
## rexpr -> expr DIV . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID DIV NULL INCR
##
## Ends in an error in state: 77.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr DIV expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr DIV expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID OR WHILE
##
## Ends in an error in state: 78.
##
## rexpr -> expr OR . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID OR NULL INCR
##
## Ends in an error in state: 79.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr OR expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr OR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID NEQ WHILE
##
## Ends in an error in state: 80.
##
## rexpr -> expr NEQ . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr NEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID NEQ NULL INCR
##
## Ends in an error in state: 81.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr NEQ expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr NEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ADD WHILE
##
## Ends in an error in state: 82.
##
## rexpr -> expr ADD . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ADD NULL INCR
##
## Ends in an error in state: 83.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr ADD expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LT WHILE
##
## Ends in an error in state: 84.
##
## rexpr -> expr LT . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LT NULL INCR
##
## Ends in an error in state: 85.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr LT expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID EQ WHILE
##
## Ends in an error in state: 86.
##
## rexpr -> expr EQ . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID EQ NULL INCR
##
## Ends in an error in state: 87.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr EQ expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LEQ WHILE
##
## Ends in an error in state: 88.
##
## rexpr -> expr LEQ . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr LEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LEQ NULL INCR
##
## Ends in an error in state: 89.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr LEQ expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr LEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID GT WHILE
##
## Ends in an error in state: 90.
##
## rexpr -> expr GT . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID GT NULL INCR
##
## Ends in an error in state: 91.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr GT expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID GEQ WHILE
##
## Ends in an error in state: 92.
##
## rexpr -> expr GEQ . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr GEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID GEQ NULL INCR
##
## Ends in an error in state: 93.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr GEQ expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr GEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID BITXOR WHILE
##
## Ends in an error in state: 94.
##
## rexpr -> expr BITXOR . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr BITXOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID BITXOR NULL INCR
##
## Ends in an error in state: 95.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr BITXOR expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr BITXOR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID BITOR WHILE
##
## Ends in an error in state: 96.
##
## rexpr -> expr BITOR . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr BITOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID BITOR NULL INCR
##
## Ends in an error in state: 97.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr BITOR expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr BITOR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID AND WHILE
##
## Ends in an error in state: 98.
##
## rexpr -> expr AND . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID AND NULL INCR
##
## Ends in an error in state: 99.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr AND expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## expr AND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRTIMES WHILE
##
## Ends in an error in state: 100.
##
## rexpr -> lexpr ABBRTIMES . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRTIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRTIMES NULL INCR
##
## Ends in an error in state: 101.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr ABBRTIMES expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRTIMES expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRSUB WHILE
##
## Ends in an error in state: 102.
##
## rexpr -> lexpr ABBRSUB . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRSUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRSUB NULL INCR
##
## Ends in an error in state: 103.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr ABBRSUB expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRSUB expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRMOD WHILE
##
## Ends in an error in state: 104.
##
## rexpr -> lexpr ABBRMOD . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRMOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRMOD NULL INCR
##
## Ends in an error in state: 105.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr ABBRMOD expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRMOD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRDIV WHILE
##
## Ends in an error in state: 106.
##
## rexpr -> lexpr ABBRDIV . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRDIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRDIV NULL INCR
##
## Ends in an error in state: 107.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr ABBRDIV expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRDIV expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRBITXOR WHILE
##
## Ends in an error in state: 108.
##
## rexpr -> lexpr ABBRBITXOR . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRBITXOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRBITXOR NULL INCR
##
## Ends in an error in state: 109.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr ABBRBITXOR expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRBITXOR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRBITSHR WHILE
##
## Ends in an error in state: 110.
##
## rexpr -> lexpr ABBRBITSHR . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRBITSHR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRBITSHR NULL INCR
##
## Ends in an error in state: 111.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr ABBRBITSHR expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRBITSHR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRBITSHL WHILE
##
## Ends in an error in state: 112.
##
## rexpr -> lexpr ABBRBITSHL . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRBITSHL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRBITSHL NULL INCR
##
## Ends in an error in state: 113.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr ABBRBITSHL expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRBITSHL expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRBITOR WHILE
##
## Ends in an error in state: 114.
##
## rexpr -> lexpr ABBRBITOR . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRBITOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRBITOR NULL INCR
##
## Ends in an error in state: 115.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr ABBRBITOR expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRBITOR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRBITAND WHILE
##
## Ends in an error in state: 116.
##
## rexpr -> lexpr ABBRBITAND . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRBITAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRBITAND NULL INCR
##
## Ends in an error in state: 117.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr ABBRBITAND expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRBITAND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRADD WHILE
##
## Ends in an error in state: 118.
##
## rexpr -> lexpr ABBRADD . expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRADD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID ABBRADD NULL INCR
##
## Ends in an error in state: 119.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr ABBRADD expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr ABBRADD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LPAR NULL INCR
##
## Ends in an error in state: 124.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAR ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LPAR ID COMMA WHILE
##
## Ends in an error in state: 125.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN ID LSBRACKET NULL INCR
##
## Ends in an error in state: 127.
##
## lexpr -> lexpr LSBRACKET expr . RSBRACKET [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RSBRACKET OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr LSBRACKET expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN INCR ID INCR
##
## Ends in an error in state: 129.
##
## lexpr -> lexpr . LSBRACKET expr RSBRACKET [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ GT GEQ EQ DOT DIV COMMA BITXOR BITOR AND AMP ADD ]
## lexpr -> lexpr . DOT ID [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ GT GEQ EQ DOT DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> INCR lexpr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## INCR lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN NOT NULL INCR
##
## Ends in an error in state: 130.
##
## rexpr -> NOT expr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## NOT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN LPAR NULL SEMICOL
##
## Ends in an error in state: 133.
##
## aexpr -> LPAR rexpr_comma . RPAR [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## expr_comma -> rexpr_comma . [ COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR rexpr_comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 135, spurious reduction of production rexpr_comma -> rexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN LPAR NULL INCR
##
## Ends in an error in state: 135.
##
## expr -> rexpr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr_comma -> rexpr . [ SEMICOL RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## rexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN LPAR ID SEMICOL
##
## Ends in an error in state: 136.
##
## expr -> lexpr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## expr_comma -> lexpr . [ COMMA ]
## lexpr -> LPAR lexpr . RPAR [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## lexpr -> lexpr . LSBRACKET expr RSBRACKET [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## lexpr -> lexpr . DOT ID [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## rexpr -> lexpr . ASSIGN expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRSUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRTIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRDIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRMOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITAND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITSHL expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITSHR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . INCR [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . DECR [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## LPAR lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production lexpr -> ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN LPAR ID COMMA WHILE
##
## Ends in an error in state: 138.
##
## rexpr_comma -> expr_comma COMMA . expr_comma [ SEMICOL RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## expr_comma COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET ID RSBRACKET
##
## Ends in an error in state: 140.
##
## expr -> lexpr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## expr_comma -> lexpr . [ SEMICOL RPAR COMMA ]
## lexpr -> lexpr . LSBRACKET expr RSBRACKET [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## lexpr -> lexpr . DOT ID [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## rexpr -> lexpr . ASSIGN expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRSUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRTIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRDIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRMOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITAND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITSHL expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . ABBRBITSHR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . INCR [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> lexpr . DECR [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production lexpr -> ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN TIMES ID WHILE
##
## Ends in an error in state: 143.
##
## lexpr -> TIMES lexpr . [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## lexpr -> lexpr . LSBRACKET expr RSBRACKET [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
## lexpr -> lexpr . DOT ID [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL RSBRACKET RPAR OR NEQ MOD LT LSBRACKET LEQ INCR GT GEQ EQ DOT DIV DECR COMMA BITXOR BITOR ASSIGN AND AMP ADD ABBRTIMES ABBRSUB ABBRMOD ABBRDIV ABBRBITXOR ABBRBITSHR ABBRBITSHL ABBRBITOR ABBRBITAND ABBRADD ]
##
## The known suffix of the stack is as follows:
## TIMES lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET WHILE LPAR NULL INCR
##
## Ends in an error in state: 145.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## stmt -> WHILE LPAR expr . RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## WHILE LPAR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET WHILE LPAR ID RPAR VOID
##
## Ends in an error in state: 146.
##
## stmt -> WHILE LPAR expr RPAR . stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## WHILE LPAR expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET RETURN WHILE
##
## Ends in an error in state: 147.
##
## stmt -> RETURN . option(expr_comma) SEMICOL [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET RETURN ID RPAR
##
## Ends in an error in state: 148.
##
## stmt -> RETURN option(expr_comma) . SEMICOL [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## RETURN option(expr_comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production lexpr -> ID
## In state 140, spurious reduction of production expr_comma -> lexpr
## In state 150, spurious reduction of production option(expr_comma) -> expr_comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET IF WHILE
##
## Ends in an error in state: 151.
##
## stmt -> IF . LPAR expr RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
## stmt -> IF . LPAR expr RPAR stmt ELSE stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET IF LPAR WHILE
##
## Ends in an error in state: 152.
##
## stmt -> IF LPAR . expr RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
## stmt -> IF LPAR . expr RPAR stmt ELSE stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET IF LPAR NULL INCR
##
## Ends in an error in state: 153.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## stmt -> IF LPAR expr . RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
## stmt -> IF LPAR expr . RPAR stmt ELSE stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## IF LPAR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET IF LPAR ID RPAR VOID
##
## Ends in an error in state: 154.
##
## stmt -> IF LPAR expr RPAR . stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
## stmt -> IF LPAR expr RPAR . stmt ELSE stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## IF LPAR expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET FOR WHILE
##
## Ends in an error in state: 155.
##
## stmt -> FOR . LPAR option(expr_comma) SEMICOL option(expr_comma) SEMICOL option(expr_comma) RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
## stmt -> FOR . LPAR typ separated_nonempty_list(COMMA,vardecl) SEMICOL option(expr_comma) SEMICOL option(expr_comma) RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## FOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET FOR LPAR WHILE
##
## Ends in an error in state: 156.
##
## stmt -> FOR LPAR . option(expr_comma) SEMICOL option(expr_comma) SEMICOL option(expr_comma) RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
## stmt -> FOR LPAR . typ separated_nonempty_list(COMMA,vardecl) SEMICOL option(expr_comma) SEMICOL option(expr_comma) RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## FOR LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET FOR LPAR BOOL WHILE
##
## Ends in an error in state: 157.
##
## stmt -> FOR LPAR typ . separated_nonempty_list(COMMA,vardecl) SEMICOL option(expr_comma) SEMICOL option(expr_comma) RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## FOR LPAR typ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL TIMES ID RPAR
##
## Ends in an error in state: 158.
##
## vardecl -> vardesc . option(preceded(ASSIGN,expr)) [ SEMICOL COMMA ]
## vardesc -> vardesc . LSBRACKET option(VINT) RSBRACKET [ SEMICOL LSBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## vardesc
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 22, spurious reduction of production vardesc -> TIMES vardesc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN WHILE
##
## Ends in an error in state: 159.
##
## option(preceded(ASSIGN,expr)) -> ASSIGN . expr [ SEMICOL COMMA ]
##
## The known suffix of the stack is as follows:
## ASSIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID ASSIGN NULL INCR
##
## Ends in an error in state: 160.
##
## option(preceded(ASSIGN,expr)) -> ASSIGN expr . [ SEMICOL COMMA ]
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT SEMICOL OR NEQ MOD LT LEQ GT GEQ EQ DIV COMMA BITXOR BITOR AND AMP ADD ]
##
## The known suffix of the stack is as follows:
## ASSIGN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID COMMA WHILE
##
## Ends in an error in state: 163.
##
## separated_nonempty_list(COMMA,vardecl) -> vardecl COMMA . separated_nonempty_list(COMMA,vardecl) [ SEMICOL ]
##
## The known suffix of the stack is as follows:
## vardecl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET FOR LPAR BOOL ID SEMICOL WHILE
##
## Ends in an error in state: 166.
##
## stmt -> FOR LPAR typ separated_nonempty_list(COMMA,vardecl) SEMICOL . option(expr_comma) SEMICOL option(expr_comma) RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## FOR LPAR typ separated_nonempty_list(COMMA,vardecl) SEMICOL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET FOR LPAR BOOL ID SEMICOL ID RPAR
##
## Ends in an error in state: 167.
##
## stmt -> FOR LPAR typ separated_nonempty_list(COMMA,vardecl) SEMICOL option(expr_comma) . SEMICOL option(expr_comma) RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## FOR LPAR typ separated_nonempty_list(COMMA,vardecl) SEMICOL option(expr_comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production lexpr -> ID
## In state 140, spurious reduction of production expr_comma -> lexpr
## In state 150, spurious reduction of production option(expr_comma) -> expr_comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET FOR LPAR BOOL ID SEMICOL SEMICOL WHILE
##
## Ends in an error in state: 168.
##
## stmt -> FOR LPAR typ separated_nonempty_list(COMMA,vardecl) SEMICOL option(expr_comma) SEMICOL . option(expr_comma) RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## FOR LPAR typ separated_nonempty_list(COMMA,vardecl) SEMICOL option(expr_comma) SEMICOL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET FOR LPAR BOOL ID SEMICOL SEMICOL ID SEMICOL
##
## Ends in an error in state: 169.
##
## stmt -> FOR LPAR typ separated_nonempty_list(COMMA,vardecl) SEMICOL option(expr_comma) SEMICOL option(expr_comma) . RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## FOR LPAR typ separated_nonempty_list(COMMA,vardecl) SEMICOL option(expr_comma) SEMICOL option(expr_comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production lexpr -> ID
## In state 140, spurious reduction of production expr_comma -> lexpr
## In state 150, spurious reduction of production option(expr_comma) -> expr_comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET FOR LPAR BOOL ID SEMICOL SEMICOL RPAR VOID
##
## Ends in an error in state: 170.
##
## stmt -> FOR LPAR typ separated_nonempty_list(COMMA,vardecl) SEMICOL option(expr_comma) SEMICOL option(expr_comma) RPAR . stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## FOR LPAR typ separated_nonempty_list(COMMA,vardecl) SEMICOL option(expr_comma) SEMICOL option(expr_comma) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET DO VOID
##
## Ends in an error in state: 171.
##
## stmt -> DO . stmt WHILE LPAR expr RPAR SEMICOL [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## DO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET DO LCBRACKET RCBRACKET VOID
##
## Ends in an error in state: 172.
##
## stmt -> DO stmt . WHILE LPAR expr RPAR SEMICOL [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## DO stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET DO LCBRACKET RCBRACKET WHILE WHILE
##
## Ends in an error in state: 173.
##
## stmt -> DO stmt WHILE . LPAR expr RPAR SEMICOL [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## DO stmt WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET DO LCBRACKET RCBRACKET WHILE LPAR WHILE
##
## Ends in an error in state: 174.
##
## stmt -> DO stmt WHILE LPAR . expr RPAR SEMICOL [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## DO stmt WHILE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET DO LCBRACKET RCBRACKET WHILE LPAR NULL INCR
##
## Ends in an error in state: 175.
##
## rexpr -> expr . ADD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SUB expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . TIMES expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . MOD expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . DIV expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AND expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . OR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . LEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . GEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . EQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . NEQ expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . AMP expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . BITXOR expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTLEFT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## rexpr -> expr . SHIFTRIGHT expr [ TIMES SUB SHIFTRIGHT SHIFTLEFT RPAR OR NEQ MOD LT LEQ GT GEQ EQ DIV BITXOR BITOR AND AMP ADD ]
## stmt -> DO stmt WHILE LPAR expr . RPAR SEMICOL [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## DO stmt WHILE LPAR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET DO LCBRACKET RCBRACKET WHILE LPAR ID RPAR WHILE
##
## Ends in an error in state: 176.
##
## stmt -> DO stmt WHILE LPAR expr RPAR . SEMICOL [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## DO stmt WHILE LPAR expr RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET ID RPAR
##
## Ends in an error in state: 178.
##
## rexpr_comma -> expr_comma . COMMA expr_comma [ SEMICOL COMMA ]
## stmt -> expr_comma . SEMICOL [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## expr_comma
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production lexpr -> ID
## In state 140, spurious reduction of production expr_comma -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET FOR LPAR ID RPAR
##
## Ends in an error in state: 182.
##
## stmt -> FOR LPAR option(expr_comma) . SEMICOL option(expr_comma) SEMICOL option(expr_comma) RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expr_comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production lexpr -> ID
## In state 140, spurious reduction of production expr_comma -> lexpr
## In state 150, spurious reduction of production option(expr_comma) -> expr_comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET FOR LPAR SEMICOL WHILE
##
## Ends in an error in state: 183.
##
## stmt -> FOR LPAR option(expr_comma) SEMICOL . option(expr_comma) SEMICOL option(expr_comma) RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expr_comma) SEMICOL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET FOR LPAR SEMICOL ID RPAR
##
## Ends in an error in state: 184.
##
## stmt -> FOR LPAR option(expr_comma) SEMICOL option(expr_comma) . SEMICOL option(expr_comma) RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expr_comma) SEMICOL option(expr_comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production lexpr -> ID
## In state 140, spurious reduction of production expr_comma -> lexpr
## In state 150, spurious reduction of production option(expr_comma) -> expr_comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET FOR LPAR SEMICOL SEMICOL WHILE
##
## Ends in an error in state: 185.
##
## stmt -> FOR LPAR option(expr_comma) SEMICOL option(expr_comma) SEMICOL . option(expr_comma) RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expr_comma) SEMICOL option(expr_comma) SEMICOL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET FOR LPAR SEMICOL SEMICOL ID SEMICOL
##
## Ends in an error in state: 186.
##
## stmt -> FOR LPAR option(expr_comma) SEMICOL option(expr_comma) SEMICOL option(expr_comma) . RPAR stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expr_comma) SEMICOL option(expr_comma) SEMICOL option(expr_comma)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production lexpr -> ID
## In state 140, spurious reduction of production expr_comma -> lexpr
## In state 150, spurious reduction of production option(expr_comma) -> expr_comma
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET FOR LPAR SEMICOL SEMICOL RPAR VOID
##
## Ends in an error in state: 187.
##
## stmt -> FOR LPAR option(expr_comma) SEMICOL option(expr_comma) SEMICOL option(expr_comma) RPAR . stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## FOR LPAR option(expr_comma) SEMICOL option(expr_comma) SEMICOL option(expr_comma) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET IF LPAR ID RPAR LCBRACKET RCBRACKET VOID
##
## Ends in an error in state: 189.
##
## stmt -> IF LPAR expr RPAR stmt . [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
## stmt -> IF LPAR expr RPAR stmt . ELSE stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## IF LPAR expr RPAR stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET IF LPAR ID RPAR LCBRACKET RCBRACKET ELSE VOID
##
## Ends in an error in state: 190.
##
## stmt -> IF LPAR expr RPAR stmt ELSE . stmt [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT ELSE DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## IF LPAR expr RPAR stmt ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET BOOL WHILE
##
## Ends in an error in state: 193.
##
## stmt_or_dec -> typ . separated_nonempty_list(COMMA,vardecl) SEMICOL [ WHILE VSTRING VINT VFLOAT VCHAR VBOOL TIMES SUB STRUCT SIZEOF RETURN RCBRACKET NULL NOT LPAR LCBRACKET INT INCR IF ID FOR FLOAT DO DECR CHAR BOOL BITNOT AMP ]
##
## The known suffix of the stack is as follows:
## typ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR LCBRACKET LCBRACKET RCBRACKET VOID
##
## Ends in an error in state: 196.
##
## list(stmt_or_dec) -> stmt_or_dec . list(stmt_or_dec) [ RCBRACKET ]
##
## The known suffix of the stack is as follows:
## stmt_or_dec
##

Cannot declare void variables

program: STRUCT WHILE
##
## Ends in an error in state: 202.
##
## structdecl -> STRUCT . ID LCBRACKET list(terminated(vardecl_no_init,SEMICOL)) RCBRACKET SEMICOL [ VOID STRUCT INT FLOAT EOF CHAR BOOL ]
## typ -> STRUCT . ID [ TIMES LPAR ID ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT ID WHILE
##
## Ends in an error in state: 203.
##
## structdecl -> STRUCT ID . LCBRACKET list(terminated(vardecl_no_init,SEMICOL)) RCBRACKET SEMICOL [ VOID STRUCT INT FLOAT EOF CHAR BOOL ]
## typ -> STRUCT ID . [ TIMES LPAR ID ]
##
## The known suffix of the stack is as follows:
## STRUCT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT ID LCBRACKET WHILE
##
## Ends in an error in state: 204.
##
## structdecl -> STRUCT ID LCBRACKET . list(terminated(vardecl_no_init,SEMICOL)) RCBRACKET SEMICOL [ VOID STRUCT INT FLOAT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT ID LCBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT ID LCBRACKET BOOL ID RPAR
##
## Ends in an error in state: 205.
##
## list(terminated(vardecl_no_init,SEMICOL)) -> vardecl_no_init . SEMICOL list(terminated(vardecl_no_init,SEMICOL)) [ RCBRACKET ]
##
## The known suffix of the stack is as follows:
## vardecl_no_init
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production vardecl_no_init -> typ vardesc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT ID LCBRACKET BOOL ID SEMICOL WHILE
##
## Ends in an error in state: 206.
##
## list(terminated(vardecl_no_init,SEMICOL)) -> vardecl_no_init SEMICOL . list(terminated(vardecl_no_init,SEMICOL)) [ RCBRACKET ]
##
## The known suffix of the stack is as follows:
## vardecl_no_init SEMICOL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: STRUCT ID LCBRACKET RCBRACKET WHILE
##
## Ends in an error in state: 209.
##
## structdecl -> STRUCT ID LCBRACKET list(terminated(vardecl_no_init,SEMICOL)) RCBRACKET . SEMICOL [ VOID STRUCT INT FLOAT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## STRUCT ID LCBRACKET list(terminated(vardecl_no_init,SEMICOL)) RCBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL WHILE
##
## Ends in an error in state: 211.
##
## fundecl -> typ . ID LPAR loption(separated_nonempty_list(COMMA,vardecl_no_init)) RPAR block [ VOID STRUCT INT FLOAT EOF CHAR BOOL ]
## topdecl -> typ . separated_nonempty_list(COMMA,vardecl) SEMICOL [ VOID STRUCT INT FLOAT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## typ
##

Invalid bracket placement

program: BOOL ID WHILE
##
## Ends in an error in state: 212.
##
## fundecl -> typ ID . LPAR loption(separated_nonempty_list(COMMA,vardecl_no_init)) RPAR block [ VOID STRUCT INT FLOAT EOF CHAR BOOL ]
## vardesc -> ID . [ SEMICOL LSBRACKET COMMA ASSIGN ]
##
## The known suffix of the stack is as follows:
## typ ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR WHILE
##
## Ends in an error in state: 213.
##
## fundecl -> typ ID LPAR . loption(separated_nonempty_list(COMMA,vardecl_no_init)) RPAR block [ VOID STRUCT INT FLOAT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## typ ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID LPAR RPAR WHILE
##
## Ends in an error in state: 215.
##
## fundecl -> typ ID LPAR loption(separated_nonempty_list(COMMA,vardecl_no_init)) RPAR . block [ VOID STRUCT INT FLOAT EOF CHAR BOOL ]
##
## The known suffix of the stack is as follows:
## typ ID LPAR loption(separated_nonempty_list(COMMA,vardecl_no_init)) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: BOOL ID SEMICOL WHILE
##
## Ends in an error in state: 219.
##
## list(topdecl) -> topdecl . list(topdecl) [ EOF ]
##
## The known suffix of the stack is as follows:
## topdecl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

